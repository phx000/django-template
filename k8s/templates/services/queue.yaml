apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: queue-statefulset
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: queue-service
  replicas: 1
  selector:
    matchLabels:
      app: queue
  template:
    metadata:
      labels:
        app: queue
    spec:
      containers:
        - name: queue
          image: rabbitmq:3-management
          ports:
            - containerPort: 5672
            - containerPort: 15672
          volumeMounts:
            - name: queue-data
              mountPath: /var/lib/rabbitmq
          resources:
            requests:
              memory: {{ .Values.services.queue.requests.memory }}
              cpu: {{ .Values.services.queue.requests.cpu }}
            limits:
              memory: {{ .Values.services.queue.limits.memory }}
              cpu: {{ .Values.services.queue.limits.cpu }}
          livenessProbe:
            httpGet:
              path: /api/overview
              port: 15672
              httpHeaders:
                - name: Authorization
                  value: "Basic Z3Vlc3Q6Z3Vlc3Q="
            initialDelaySeconds: 10
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/overview
              port: 15672
              httpHeaders:
                - name: Authorization
                  value: "Basic Z3Vlc3Q6Z3Vlc3Q="
            initialDelaySeconds: 10
            periodSeconds: 30
  volumeClaimTemplates:
    - metadata:
        name: queue-data
        namespace: {{ .Release.Namespace }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: queue-service
  namespace: {{ .Release.Namespace }}
spec:
  clusterIP: None
  selector:
    app: queue
  ports:
    - name: amqp-port
      port: 5672
      targetPort: 5672
    - name: management-port
      port: 15672
      targetPort: 15672